{"ast":null,"code":"import _slicedToArray from \"C:/Users/RajaJ/Downloads/YogaIntelliJ-main/YogaIntelliJ-main/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport * as conv_util from '../ops/conv_util';\nimport { depthwiseConv2dNativeBackpropFilter } from '../ops/depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../ops/depthwise_conv2d_native_backprop_input';\nimport * as util from '../util';\nexport var depthwiseConv2dNativeGradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var dilations = attrs.dilations,\n        strides = attrs.strides,\n        pad = attrs.pad,\n        dimRoundingMode = attrs.dimRoundingMode;\n    var $dilations = dilations == null ? [1, 1] : dilations;\n    util.assert(conv_util.tupleValuesAreOne($dilations), function () {\n      return 'Error in gradient of depthwiseConv2dNative: dilation rates ' + \"greater than 1 are not yet supported. Got dilations \" + \"'\".concat($dilations, \"'\");\n    });\n\n    var _saved = _slicedToArray(saved, 2),\n        _x = _saved[0],\n        _filter = _saved[1];\n\n    util.assert(_x.rank === 4, function () {\n      return \"Error in gradient of depthwiseConv2dNative: input must be \" + \"rank 4, but got rank \".concat(_x.rank, \".\");\n    });\n    util.assert(_filter.rank === 4, function () {\n      return \"Error in gradient of depthwiseConv2dNative: filter must be \" + \"rank 4, but got rank \".concat(_filter.rank, \".\");\n    });\n    util.assert(_x.shape[3] === _filter.shape[2], function () {\n      return \"Error in gradient of depthwiseConv2d: number of input \" + \"channels (\".concat(_x.shape[3], \") must match the inChannels dimension \") + \"in filter \".concat(_filter.shape[2], \".\");\n    });\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), function () {\n      return 'Error in gradient of depthwiseConv2d: Either strides or ' + \"dilations must be  1. Got strides \".concat(strides, \" and dilations \") + \"'\".concat($dilations, \"'.\");\n    });\n\n    if (dimRoundingMode != null) {\n      util.assert(util.isInt(pad), function () {\n        return \"Error in depthwiseConv2d: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n      });\n    }\n\n    return {\n      x: function x() {\n        return depthwiseConv2dNativeBackpropInput(_x.shape, dy, _filter, strides, pad, $dilations, dimRoundingMode);\n      },\n      filter: function filter() {\n        return depthwiseConv2dNativeBackpropFilter(_x, dy, _filter.shape, strides, pad, $dilations, dimRoundingMode);\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/gradients/DepthwiseConv2dNative_grad.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,qBAAR,QAAgE,iBAAhE;AAEA,OAAO,KAAK,SAAZ,MAA2B,kBAA3B;AACA,SAAQ,mCAAR,QAAkD,gDAAlD;AACA,SAAQ,kCAAR,QAAiD,+CAAjD;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,OAAO,IAAM,+BAA+B,GAAe;AACzD,EAAA,UAAU,EAAE,qBAD6C;AAEzD,EAAA,YAAY,EAAE,CAAC,GAAD,EAAM,QAAN,CAF2C;AAGzD,EAAA,QAAQ,EAAE,kBAAC,EAAD,EAAe,KAAf,EAAgC,KAAhC,EAAuD;AAC/D,QAAO,SAAP,GACI,KADJ,CAAO,SAAP;AAAA,QAAkB,OAAlB,GACI,KADJ,CAAkB,OAAlB;AAAA,QAA2B,GAA3B,GACI,KADJ,CAA2B,GAA3B;AAAA,QAAgC,eAAhC,GACI,KADJ,CAAgC,eAAhC;AAEA,QAAM,UAAU,GAAG,SAAS,IAAI,IAAb,GAAoB,CAAC,CAAD,EAAI,CAAJ,CAApB,GAA+C,SAAlE;AAEA,IAAA,IAAI,CAAC,MAAL,CACI,SAAS,CAAC,iBAAV,CAA4B,UAA5B,CADJ,EAEI;AAAA,aAAM,oIAEE,UAFF,MAAN;AAAA,KAFJ;;AAMA,gCAAoB,KAApB;AAAA,QAAO,EAAP;AAAA,QAAU,OAAV;;AAEA,IAAA,IAAI,CAAC,MAAL,CACI,EAAC,CAAC,IAAF,KAAW,CADf,EAEI;AAAA,aAAM,8FACsB,EAAC,CAAC,IADxB,MAAN;AAAA,KAFJ;AAIA,IAAA,IAAI,CAAC,MAAL,CACI,OAAM,CAAC,IAAP,KAAgB,CADpB,EAEI;AAAA,aAAM,+FACsB,OAAM,CAAC,IAD7B,MAAN;AAAA,KAFJ;AAIA,IAAA,IAAI,CAAC,MAAL,CACI,EAAC,CAAC,KAAF,CAAQ,CAAR,MAAe,OAAM,CAAC,KAAP,CAAa,CAAb,CADnB,EAEI;AAAA,aAAM,+EACW,EAAC,CAAC,KAAF,CAAQ,CAAR,CADX,kEAEW,OAAM,CAAC,KAAP,CAAa,CAAb,CAFX,MAAN;AAAA,KAFJ;AAMA,IAAA,IAAI,CAAC,MAAL,CACI,SAAS,CAAC,8BAAV,CAAyC,OAAzC,EAAkD,UAAlD,CADJ,EAEI;AAAA,aAAM,yGACmC,OADnC,kCAEE,UAFF,OAAN;AAAA,KAFJ;;AAMA,QAAI,eAAe,IAAI,IAAvB,EAA6B;AAC3B,MAAA,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,KAAL,CAAW,GAAX,CADJ,EAEI;AAAA,eACI,4FACmB,eADnB,0BACkD,GADlD,MADJ;AAAA,OAFJ;AAKD;;AAED,WAAO;AACL,MAAA,CAAC,EAAE;AAAA,eAAM,kCAAkC,CACvC,EAAC,CAAC,KADqC,EAC9B,EAD8B,EAC1B,OAD0B,EAClB,OADkB,EACT,GADS,EACJ,UADI,EACQ,eADR,CAAxC;AAAA,OADE;AAGL,MAAA,MAAM,EAAE;AAAA,eAAM,mCAAmC,CAC7C,EAD6C,EAC1C,EAD0C,EACtC,OAAM,CAAC,KAD+B,EACxB,OADwB,EACf,GADe,EACV,UADU,EACE,eADF,CAAzC;AAAA;AAHH,KAAP;AAMD;AAlDwD,CAApD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport * as conv_util from '../ops/conv_util';\nimport {depthwiseConv2dNativeBackpropFilter} from '../ops/depthwise_conv2d_native_backprop_filter';\nimport {depthwiseConv2dNativeBackpropInput} from '../ops/depthwise_conv2d_native_backprop_input';\nimport {Tensor, Tensor4D} from '../tensor';\nimport * as util from '../util';\n\nexport const depthwiseConv2dNativeGradConfig: GradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {dilations, strides, pad, dimRoundingMode} =\n        attrs as {} as DepthwiseConv2dNativeAttrs;\n    const $dilations = dilations == null ? [1, 1] as[number,number] : dilations;\n\n    util.assert(\n        conv_util.tupleValuesAreOne($dilations),\n        () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${$dilations}'`);\n\n    const [x, filter] = saved as [Tensor4D, Tensor4D];\n\n    util.assert(\n        x.rank === 4,\n        () => `Error in gradient of depthwiseConv2dNative: input must be ` +\n            `rank 4, but got rank ${x.rank}.`);\n    util.assert(\n        filter.rank === 4,\n        () => `Error in gradient of depthwiseConv2dNative: filter must be ` +\n            `rank 4, but got rank ${filter.rank}.`);\n    util.assert(\n        x.shape[3] === filter.shape[2],\n        () => `Error in gradient of depthwiseConv2d: number of input ` +\n            `channels (${x.shape[3]}) must match the inChannels dimension ` +\n            `in filter ${filter.shape[2]}.`);\n\n    util.assert(\n        conv_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n        () => 'Error in gradient of depthwiseConv2d: Either strides or ' +\n            `dilations must be  1. Got strides ${strides} and dilations ` +\n            `'${$dilations}'.`);\n\n    if (dimRoundingMode != null) {\n      util.assert(\n          util.isInt(pad as number),\n          () =>\n              `Error in depthwiseConv2d: pad must be an integer when using, ` +\n              `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n\n    return {\n      x: () => depthwiseConv2dNativeBackpropInput(\n          x.shape, dy, filter, strides, pad, $dilations, dimRoundingMode),\n      filter: () => depthwiseConv2dNativeBackpropFilter(\n          x, dy, filter.shape, strides, pad, $dilations, dimRoundingMode),\n    };\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}