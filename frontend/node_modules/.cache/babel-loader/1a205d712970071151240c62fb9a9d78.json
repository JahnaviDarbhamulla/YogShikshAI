{"ast":null,"code":"import _slicedToArray from \"C:/Users/RajaJ/Downloads/YogaIntelliJ-main/YogaIntelliJ-main/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sum } from '../kernel_names';\nimport { mul } from '../ops/mul';\nimport { ones } from '../ops/ones';\nimport { reshape } from '../ops/reshape';\nimport { parseAxisParam } from '../util';\nexport var sumGradConfig = {\n  kernelName: Sum,\n  inputsToSave: ['x'],\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var _saved = _slicedToArray(saved, 1),\n        x = _saved[0];\n\n    var expandedDyShape = x.shape.slice();\n    var axis = attrs.axis;\n    var axes = parseAxisParam(axis, x.shape);\n    axes.forEach(function (axis) {\n      expandedDyShape[axis] = 1;\n    });\n    var expandedDy = reshape(dy, expandedDyShape);\n    var derX = mul(expandedDy, ones(x.shape, 'float32'));\n    return {\n      x: function x() {\n        return derX;\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/gradients/Sum_grad.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR,QAA4B,iBAA5B;AAEA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,OAAR,QAAsB,gBAAtB;AAEA,SAAQ,cAAR,QAA6B,SAA7B;AAEA,OAAO,IAAM,aAAa,GAAe;AACvC,EAAA,UAAU,EAAE,GAD2B;AAEvC,EAAA,YAAY,EAAE,CAAC,GAAD,CAFyB;AAGvC,EAAA,QAAQ,EAAE,kBAAC,EAAD,EAAa,KAAb,EAA8B,KAA9B,EAAqD;AAC7D,gCAAY,KAAZ;AAAA,QAAO,CAAP;;AACA,QAAM,eAAe,GAAG,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAxB;AACA,QAAO,IAAP,GAAe,KAAf,CAAO,IAAP;AAEA,QAAM,IAAI,GAAG,cAAc,CAAC,IAAD,EAAO,CAAC,CAAC,KAAT,CAA3B;AACA,IAAA,IAAI,CAAC,OAAL,CAAa,UAAA,IAAI,EAAG;AAClB,MAAA,eAAe,CAAC,IAAD,CAAf,GAAwB,CAAxB;AACD,KAFD;AAGA,QAAM,UAAU,GAAG,OAAO,CAAC,EAAD,EAAK,eAAL,CAA1B;AACA,QAAM,IAAI,GAAG,GAAG,CAAC,UAAD,EAAa,IAAI,CAAC,CAAC,CAAC,KAAH,EAAU,SAAV,CAAjB,CAAhB;AAEA,WAAO;AAAC,MAAA,CAAC,EAAE;AAAA,eAAM,IAAN;AAAA;AAAJ,KAAP;AACD;AAhBsC,CAAlC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Sum, SumAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {mul} from '../ops/mul';\nimport {ones} from '../ops/ones';\nimport {reshape} from '../ops/reshape';\nimport {Tensor} from '../tensor';\nimport {parseAxisParam} from '../util';\n\nexport const sumGradConfig: GradConfig = {\n  kernelName: Sum,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const expandedDyShape = x.shape.slice();\n    const {axis} = attrs as {} as SumAttrs;\n\n    const axes = parseAxisParam(axis, x.shape);\n    axes.forEach(axis => {\n      expandedDyShape[axis] = 1;\n    });\n    const expandedDy = reshape(dy, expandedDyShape);\n    const derX = mul(expandedDy, ones(x.shape, 'float32'));\n\n    return {x: () => derX};\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}