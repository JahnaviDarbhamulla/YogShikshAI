{"ast":null,"code":"import _slicedToArray from \"C:/Users/RajaJ/Downloads/YogaIntelliJ-main/YogaIntelliJ-main/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImpl } from './SparseReshape_impl';\nexport function sparseReshape(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var inputIndices = inputs.inputIndices,\n      inputShape = inputs.inputShape,\n      newShape = inputs.newShape;\n\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(\"Input indices should be a matrix but received shape\\n        \".concat(inputIndices.shape));\n  }\n\n  if (inputShape.shape.length !== 1) {\n    throw new Error(\"Input shape should be a vector but received shape\\n        \".concat(inputShape.shape));\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\"Target shape should be a vector but received shape \".concat(newShape.shape));\n  }\n\n  var $inputShape = Array.from(backend.data.get(inputShape.dataId).values);\n  var $inputIndices = backend.data.get(inputIndices.dataId).values;\n  var targetShape = Array.from(backend.data.get(newShape.dataId).values);\n\n  var _sparseReshapeImpl = sparseReshapeImpl($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape),\n      _sparseReshapeImpl2 = _slicedToArray(_sparseReshapeImpl, 3),\n      newIndices = _sparseReshapeImpl2[0],\n      indicesShape = _sparseReshapeImpl2[1],\n      outputShape = _sparseReshapeImpl2[2];\n\n  return [backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices), backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))];\n}\nexport var sparseReshapeConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/SparseReshape.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAsB,aAAtB,QAAuF,uBAAvF;AAIA,SAAQ,iBAAR,QAAgC,sBAAhC;AAEA,OAAM,SAAU,aAAV,CACF,IADE,EAC0D;AAE9D,MAAO,MAAP,GAA0B,IAA1B,CAAO,MAAP;AAAA,MAAe,OAAf,GAA0B,IAA1B,CAAe,OAAf;AACA,MAAO,YAAP,GAA6C,MAA7C,CAAO,YAAP;AAAA,MAAqB,UAArB,GAA6C,MAA7C,CAAqB,UAArB;AAAA,MAAiC,QAAjC,GAA6C,MAA7C,CAAiC,QAAjC;;AACA,MAAI,YAAY,CAAC,KAAb,CAAmB,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,UAAM,IAAI,KAAJ,wEACA,YAAY,CAAC,KADb,EAAN;AAED;;AACD,MAAI,UAAU,CAAC,KAAX,CAAiB,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,UAAM,IAAI,KAAJ,sEACA,UAAU,CAAC,KADX,EAAN;AAED;;AAED,MAAI,QAAQ,CAAC,KAAT,CAAe,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,UAAM,IAAI,KAAJ,8DACoD,QAAQ,CAAC,KAD7D,EAAN;AAED;;AAED,MAAM,WAAW,GACb,KAAK,CAAC,IAAN,CAAW,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,UAAU,CAAC,MAA5B,EAAoC,MAA/C,CADJ;AAEA,MAAM,aAAa,GACf,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,YAAY,CAAC,MAA9B,EAAsC,MAD1C;AAEA,MAAM,WAAW,GACb,KAAK,CAAC,IAAN,CAAW,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,QAAQ,CAAC,MAA1B,EAAkC,MAA7C,CADJ;;AAGA,2BAAgD,iBAAiB,CAC7D,aAD6D,EAC9C,YAAY,CAAC,KADiC,EAC1B,YAAY,CAAC,KADa,EACN,WADM,EAE7D,WAF6D,CAAjE;AAAA;AAAA,MAAO,UAAP;AAAA,MAAmB,YAAnB;AAAA,MAAiC,WAAjC;;AAGA,SAAO,CACL,OAAO,CAAC,cAAR,CAAuB,YAAvB,EAAqC,YAAY,CAAC,KAAlD,EAAyD,UAAzD,CADK,EAEL,OAAO,CAAC,cAAR,CACI,CAAC,WAAW,CAAC,MAAb,CADJ,EAC0B,QAAQ,CAAC,KADnC,EAC0C,IAAI,UAAJ,CAAe,WAAf,CAD1C,CAFK,CAAP;AAKD;AAED,OAAO,IAAM,mBAAmB,GAAiB;AAC/C,EAAA,UAAU,EAAE,aADmC;AAE/C,EAAA,WAAW,EAAE,KAFkC;AAG/C,EAAA,UAAU,EAAE;AAHmC,CAA1C","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}