{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RajaJ\\\\Downloads\\\\YogaIntelliJ-main\\\\YogaIntelliJ-main\\\\frontend\\\\src\\\\pages\\\\Yoga\\\\Yoga.js\",\n    _s = $RefreshSig$();\n\nimport * as poseDetection from '@tensorflow-models/pose-detection';\nimport * as tf from '@tensorflow/tfjs';\nimport React, { useRef, useState, useEffect } from 'react';\nimport backend from '@tensorflow/tfjs-backend-webgl';\nimport Webcam from 'react-webcam';\nimport { count } from '../../utils/music';\nimport Instructions from '../../components/Instrctions/Instructions';\nimport './Yoga.css';\nimport DropDown from '../../components/DropDown/DropDown';\nimport { poseImages } from '../../utils/pose_images';\nimport { POINTS, keypointConnections } from '../../utils/data';\nimport { drawPoint, drawSegment } from '../../utils/helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet skeletonColor = 'rgb(255,255,255)';\nlet poseList = ['Tree', 'Chair', 'Cobra', 'Warrior', 'Dog', 'Shoulderstand', 'Traingle'];\nlet interval; // flag variable is used to help capture the time when AI just detect\n// the pose as correct(probability more than threshold)\n\nlet flag = false;\n\nfunction Yoga() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [startingTime, setStartingTime] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [poseTime, setPoseTime] = useState(0);\n  const [bestPerform, setBestPerform] = useState(0);\n  const [currentPose, setCurrentPose] = useState('Tree');\n  const [isStartPose, setIsStartPose] = useState(false);\n  useEffect(() => {\n    const timeDiff = (currentTime - startingTime) / 1000;\n\n    if (flag) {\n      setPoseTime(timeDiff);\n    }\n\n    if ((currentTime - startingTime) / 1000 > bestPerform) {\n      setBestPerform(timeDiff);\n    }\n  }, [currentTime]);\n  useEffect(() => {\n    setCurrentTime(0);\n    setPoseTime(0);\n    setBestPerform(0);\n  }, [currentPose]);\n  const CLASS_NO = {\n    Chair: 0,\n    Dog: 1,\n    Traingle: 2,\n    Tree: 3,\n    Warrior: 4\n  };\n\n  function get_center_point(landmarks, left_bodypart, right_bodypart) {\n    let left = tf.gather(landmarks, left_bodypart, 1);\n    let right = tf.gather(landmarks, right_bodypart, 1);\n    const center = tf.add(tf.mul(left, 0.5), tf.mul(right, 0.5));\n    return center;\n  }\n\n  function get_pose_size(landmarks, torso_size_multiplier = 2.5) {\n    let hips_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    let shoulders_center = get_center_point(landmarks, POINTS.LEFT_SHOULDER, POINTS.RIGHT_SHOULDER);\n    let torso_size = tf.norm(tf.sub(shoulders_center, hips_center));\n    let pose_center_new = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    pose_center_new = tf.expandDims(pose_center_new, 1);\n    pose_center_new = tf.broadcastTo(pose_center_new, [1, 17, 2]); // return: shape(17,2)\n\n    let d = tf.gather(tf.sub(landmarks, pose_center_new), 0, 0);\n    let max_dist = tf.max(tf.norm(d, 'euclidean', 0)); // normalize scale\n\n    let pose_size = tf.maximum(tf.mul(torso_size, torso_size_multiplier), max_dist);\n    return pose_size;\n  }\n\n  function normalize_pose_landmarks(landmarks) {\n    let pose_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP);\n    pose_center = tf.expandDims(pose_center, 1);\n    pose_center = tf.broadcastTo(pose_center, [1, 17, 2]);\n    landmarks = tf.sub(landmarks, pose_center);\n    let pose_size = get_pose_size(landmarks);\n    landmarks = tf.div(landmarks, pose_size);\n    return landmarks;\n  }\n\n  function landmarks_to_embedding(landmarks) {\n    // normalize landmarks 2D\n    landmarks = normalize_pose_landmarks(tf.expandDims(landmarks, 0));\n    let embedding = tf.reshape(landmarks, [1, 34]);\n    return embedding;\n  }\n\n  const runMovenet = async () => {\n    const detectorConfig = {\n      modelType: poseDetection.movenet.modelType.SINGLEPOSE_THUNDER\n    };\n    const detector = await poseDetection.createDetector(poseDetection.SupportedModels.MoveNet, detectorConfig);\n    const poseClassifier = await tf.loadLayersModel('https://models.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json');\n    const countAudio = new Audio(count);\n    countAudio.loop = true;\n    interval = setInterval(() => {\n      detectPose(detector, poseClassifier, countAudio);\n    }, 100);\n  };\n\n  const detectPose = async (detector, poseClassifier, countAudio) => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      let notDetected = 0;\n      const video = webcamRef.current.video;\n      const pose = await detector.estimatePoses(video);\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n      try {\n        const keypoints = pose[0].keypoints;\n        let input = keypoints.map(keypoint => {\n          if (keypoint.score > 0.4) {\n            if (!(keypoint.name === 'left_eye' || keypoint.name === 'right_eye')) {\n              drawPoint(ctx, keypoint.x, keypoint.y, 8, 'rgb(255,255,255)');\n              let connections = keypointConnections[keypoint.name];\n\n              try {\n                connections.forEach(connection => {\n                  let conName = connection.toUpperCase();\n                  drawSegment(ctx, [keypoint.x, keypoint.y], [keypoints[POINTS[conName]].x, keypoints[POINTS[conName]].y], skeletonColor);\n                });\n              } catch (err) {}\n            }\n          } else {\n            notDetected += 1;\n          }\n\n          return [keypoint.x, keypoint.y];\n        });\n\n        if (notDetected > 4) {\n          skeletonColor = 'rgb(255,255,255)';\n          return;\n        }\n\n        const processedInput = landmarks_to_embedding(input);\n        const classification = poseClassifier.predict(processedInput);\n        classification.array().then(data => {\n          const classNo = CLASS_NO[currentPose];\n          console.log(data[0][classNo]);\n\n          if (data[0][classNo] > 0.97) {\n            if (!flag) {\n              countAudio.play();\n              setStartingTime(new Date(Date()).getTime());\n              flag = true;\n            }\n\n            setCurrentTime(new Date(Date()).getTime());\n            skeletonColor = 'rgb(0,255,0)';\n          } else {\n            flag = false;\n            skeletonColor = 'rgb(255,255,255)';\n            countAudio.pause();\n            countAudio.currentTime = 0;\n          }\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  function startYoga() {\n    setIsStartPose(true);\n    runMovenet();\n  }\n\n  function stopPose() {\n    setIsStartPose(false);\n    clearInterval(interval);\n  }\n\n  if (isStartPose) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"yoga-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"performance-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pose-performance\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Pose Time: \", poseTime, \" s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pose-performance\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Best: \", bestPerform, \" s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          width: \"640px\",\n          height: \"480px\",\n          id: \"webcam\",\n          ref: webcamRef,\n          style: {\n            position: 'absolute',\n            left: 120,\n            top: 100,\n            padding: '0px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          id: \"my-canvas\",\n          width: \"640px\",\n          height: \"480px\",\n          style: {\n            position: 'absolute',\n            left: 120,\n            top: 100,\n            zIndex: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: poseImages[currentPose],\n            className: \"pose-img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopPose,\n        className: \"secondary-btn\",\n        children: \"Stop Pose\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"yoga-container\",\n    children: [/*#__PURE__*/_jsxDEV(DropDown, {\n      poseList: poseList,\n      currentPose: currentPose,\n      setCurrentPose: setCurrentPose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Instructions, {\n      currentPose: currentPose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startYoga,\n      className: \"secondary-btn\",\n      children: \"Start Pose\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Yoga, \"3BsscUdXQO58KxrF3rzPCTXFSjU=\");\n\n_c = Yoga;\nexport default Yoga;\n\nvar _c;\n\n$RefreshReg$(_c, \"Yoga\");","map":{"version":3,"sources":["C:/Users/RajaJ/Downloads/YogaIntelliJ-main/YogaIntelliJ-main/frontend/src/pages/Yoga/Yoga.js"],"names":["poseDetection","tf","React","useRef","useState","useEffect","backend","Webcam","count","Instructions","DropDown","poseImages","POINTS","keypointConnections","drawPoint","drawSegment","skeletonColor","poseList","interval","flag","Yoga","webcamRef","canvasRef","startingTime","setStartingTime","currentTime","setCurrentTime","poseTime","setPoseTime","bestPerform","setBestPerform","currentPose","setCurrentPose","isStartPose","setIsStartPose","timeDiff","CLASS_NO","Chair","Dog","Traingle","Tree","Warrior","get_center_point","landmarks","left_bodypart","right_bodypart","left","gather","right","center","add","mul","get_pose_size","torso_size_multiplier","hips_center","LEFT_HIP","RIGHT_HIP","shoulders_center","LEFT_SHOULDER","RIGHT_SHOULDER","torso_size","norm","sub","pose_center_new","expandDims","broadcastTo","d","max_dist","max","pose_size","maximum","normalize_pose_landmarks","pose_center","div","landmarks_to_embedding","embedding","reshape","runMovenet","detectorConfig","modelType","movenet","SINGLEPOSE_THUNDER","detector","createDetector","SupportedModels","MoveNet","poseClassifier","loadLayersModel","countAudio","Audio","loop","setInterval","detectPose","current","video","readyState","notDetected","pose","estimatePoses","ctx","getContext","clearRect","width","height","keypoints","input","map","keypoint","score","name","x","y","connections","forEach","connection","conName","toUpperCase","err","processedInput","classification","predict","array","then","data","classNo","console","log","play","Date","getTime","pause","startYoga","stopPose","clearInterval","position","top","padding","zIndex"],"mappings":";;;AAAA,OAAO,KAAKA,aAAZ,MAA+B,mCAA/B;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,OAAO,YAAP;AAEA,OAAOC,QAAP,MAAqB,oCAArB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,MAAT,EAAiBC,mBAAjB,QAA4C,kBAA5C;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,oBAAvC;;AAIA,IAAIC,aAAa,GAAG,kBAApB;AACA,IAAIC,QAAQ,GAAG,CACb,MADa,EACL,OADK,EACI,OADJ,EACa,SADb,EACwB,KADxB,EAEb,eAFa,EAEI,UAFJ,CAAf;AAKA,IAAIC,QAAJ,C,CAEA;AACA;;AACA,IAAIC,IAAI,GAAG,KAAX;;AAGA,SAASC,IAAT,GAAgB;AAAA;;AACd,QAAMC,SAAS,GAAGlB,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMmB,SAAS,GAAGnB,MAAM,CAAC,IAAD,CAAxB;AAGA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACuB,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACyB,WAAD,EAAcC,cAAd,IAAgC1B,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAAC2B,WAAD,EAAcC,cAAd,IAAgC5B,QAAQ,CAAC,MAAD,CAA9C;AACA,QAAM,CAAC6B,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC,KAAD,CAA9C;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8B,QAAQ,GAAG,CAACV,WAAW,GAAGF,YAAf,IAA6B,IAA9C;;AACA,QAAGJ,IAAH,EAAS;AACPS,MAAAA,WAAW,CAACO,QAAD,CAAX;AACD;;AACD,QAAG,CAACV,WAAW,GAAGF,YAAf,IAA6B,IAA7B,GAAoCM,WAAvC,EAAoD;AAClDC,MAAAA,cAAc,CAACK,QAAD,CAAd;AACD;AACF,GARQ,EAQN,CAACV,WAAD,CARM,CAAT;AAWApB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,cAAc,CAAC,CAAD,CAAd;AACAE,IAAAA,WAAW,CAAC,CAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,CAAD,CAAd;AACD,GAJQ,EAIN,CAACC,WAAD,CAJM,CAAT;AAMA,QAAMK,QAAQ,GAAG;AACfC,IAAAA,KAAK,EAAE,CADQ;AAGfC,IAAAA,GAAG,EAAE,CAHU;AAMfC,IAAAA,QAAQ,EAAE,CANK;AAOfC,IAAAA,IAAI,EAAE,CAPS;AAQfC,IAAAA,OAAO,EAAE;AARM,GAAjB;;AAWA,WAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,aAArC,EAAoDC,cAApD,EAAoE;AAClE,QAAIC,IAAI,GAAG7C,EAAE,CAAC8C,MAAH,CAAUJ,SAAV,EAAqBC,aAArB,EAAoC,CAApC,CAAX;AACA,QAAII,KAAK,GAAG/C,EAAE,CAAC8C,MAAH,CAAUJ,SAAV,EAAqBE,cAArB,EAAqC,CAArC,CAAZ;AACA,UAAMI,MAAM,GAAGhD,EAAE,CAACiD,GAAH,CAAOjD,EAAE,CAACkD,GAAH,CAAOL,IAAP,EAAa,GAAb,CAAP,EAA0B7C,EAAE,CAACkD,GAAH,CAAOH,KAAP,EAAc,GAAd,CAA1B,CAAf;AACA,WAAOC,MAAP;AAED;;AAED,WAASG,aAAT,CAAuBT,SAAvB,EAAkCU,qBAAqB,GAAC,GAAxD,EAA6D;AAC3D,QAAIC,WAAW,GAAGZ,gBAAgB,CAACC,SAAD,EAAY/B,MAAM,CAAC2C,QAAnB,EAA6B3C,MAAM,CAAC4C,SAApC,CAAlC;AACA,QAAIC,gBAAgB,GAAGf,gBAAgB,CAACC,SAAD,EAAW/B,MAAM,CAAC8C,aAAlB,EAAiC9C,MAAM,CAAC+C,cAAxC,CAAvC;AACA,QAAIC,UAAU,GAAG3D,EAAE,CAAC4D,IAAH,CAAQ5D,EAAE,CAAC6D,GAAH,CAAOL,gBAAP,EAAyBH,WAAzB,CAAR,CAAjB;AACA,QAAIS,eAAe,GAAGrB,gBAAgB,CAACC,SAAD,EAAY/B,MAAM,CAAC2C,QAAnB,EAA6B3C,MAAM,CAAC4C,SAApC,CAAtC;AACAO,IAAAA,eAAe,GAAG9D,EAAE,CAAC+D,UAAH,CAAcD,eAAd,EAA+B,CAA/B,CAAlB;AAEAA,IAAAA,eAAe,GAAG9D,EAAE,CAACgE,WAAH,CAAeF,eAAf,EACd,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,CADc,CAAlB,CAP2D,CAUzD;;AACF,QAAIG,CAAC,GAAGjE,EAAE,CAAC8C,MAAH,CAAU9C,EAAE,CAAC6D,GAAH,CAAOnB,SAAP,EAAkBoB,eAAlB,CAAV,EAA8C,CAA9C,EAAiD,CAAjD,CAAR;AACA,QAAII,QAAQ,GAAGlE,EAAE,CAACmE,GAAH,CAAOnE,EAAE,CAAC4D,IAAH,CAAQK,CAAR,EAAU,WAAV,EAAuB,CAAvB,CAAP,CAAf,CAZ2D,CAc3D;;AACA,QAAIG,SAAS,GAAGpE,EAAE,CAACqE,OAAH,CAAWrE,EAAE,CAACkD,GAAH,CAAOS,UAAP,EAAmBP,qBAAnB,CAAX,EAAsDc,QAAtD,CAAhB;AACA,WAAOE,SAAP;AACD;;AAED,WAASE,wBAAT,CAAkC5B,SAAlC,EAA6C;AAC3C,QAAI6B,WAAW,GAAG9B,gBAAgB,CAACC,SAAD,EAAY/B,MAAM,CAAC2C,QAAnB,EAA6B3C,MAAM,CAAC4C,SAApC,CAAlC;AACAgB,IAAAA,WAAW,GAAGvE,EAAE,CAAC+D,UAAH,CAAcQ,WAAd,EAA2B,CAA3B,CAAd;AACAA,IAAAA,WAAW,GAAGvE,EAAE,CAACgE,WAAH,CAAeO,WAAf,EACV,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,CADU,CAAd;AAGA7B,IAAAA,SAAS,GAAG1C,EAAE,CAAC6D,GAAH,CAAOnB,SAAP,EAAkB6B,WAAlB,CAAZ;AAEA,QAAIH,SAAS,GAAGjB,aAAa,CAACT,SAAD,CAA7B;AACAA,IAAAA,SAAS,GAAG1C,EAAE,CAACwE,GAAH,CAAO9B,SAAP,EAAkB0B,SAAlB,CAAZ;AACA,WAAO1B,SAAP;AACD;;AAED,WAAS+B,sBAAT,CAAgC/B,SAAhC,EAA2C;AACzC;AACAA,IAAAA,SAAS,GAAG4B,wBAAwB,CAACtE,EAAE,CAAC+D,UAAH,CAAcrB,SAAd,EAAyB,CAAzB,CAAD,CAApC;AACA,QAAIgC,SAAS,GAAG1E,EAAE,CAAC2E,OAAH,CAAWjC,SAAX,EAAsB,CAAC,CAAD,EAAG,EAAH,CAAtB,CAAhB;AACA,WAAOgC,SAAP;AACD;;AAED,QAAME,UAAU,GAAG,YAAY;AAC7B,UAAMC,cAAc,GAAG;AAACC,MAAAA,SAAS,EAAE/E,aAAa,CAACgF,OAAd,CAAsBD,SAAtB,CAAgCE;AAA5C,KAAvB;AACA,UAAMC,QAAQ,GAAG,MAAMlF,aAAa,CAACmF,cAAd,CAA6BnF,aAAa,CAACoF,eAAd,CAA8BC,OAA3D,EAAoEP,cAApE,CAAvB;AACA,UAAMQ,cAAc,GAAG,MAAMrF,EAAE,CAACsF,eAAH,CAAmB,0EAAnB,CAA7B;AACA,UAAMC,UAAU,GAAG,IAAIC,KAAJ,CAAUjF,KAAV,CAAnB;AACAgF,IAAAA,UAAU,CAACE,IAAX,GAAkB,IAAlB;AACAxE,IAAAA,QAAQ,GAAGyE,WAAW,CAAC,MAAM;AACzBC,MAAAA,UAAU,CAACV,QAAD,EAAWI,cAAX,EAA2BE,UAA3B,CAAV;AACH,KAFqB,EAEnB,GAFmB,CAAtB;AAGD,GATD;;AAWA,QAAMI,UAAU,GAAG,OAAOV,QAAP,EAAiBI,cAAjB,EAAiCE,UAAjC,KAAgD;AACjE,QACE,OAAOnE,SAAS,CAACwE,OAAjB,KAA6B,WAA7B,IACAxE,SAAS,CAACwE,OAAV,KAAsB,IADtB,IAEAxE,SAAS,CAACwE,OAAV,CAAkBC,KAAlB,CAAwBC,UAAxB,KAAuC,CAHzC,EAIE;AACA,UAAIC,WAAW,GAAG,CAAlB;AACA,YAAMF,KAAK,GAAGzE,SAAS,CAACwE,OAAV,CAAkBC,KAAhC;AACA,YAAMG,IAAI,GAAG,MAAMf,QAAQ,CAACgB,aAAT,CAAuBJ,KAAvB,CAAnB;AACA,YAAMK,GAAG,GAAG7E,SAAS,CAACuE,OAAV,CAAkBO,UAAlB,CAA6B,IAA7B,CAAZ;AACAD,MAAAA,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB/E,SAAS,CAACuE,OAAV,CAAkBS,KAAtC,EAA6ChF,SAAS,CAACuE,OAAV,CAAkBU,MAA/D;;AACA,UAAI;AACF,cAAMC,SAAS,GAAGP,IAAI,CAAC,CAAD,CAAJ,CAAQO,SAA1B;AACA,YAAIC,KAAK,GAAGD,SAAS,CAACE,GAAV,CAAeC,QAAD,IAAc;AACtC,cAAGA,QAAQ,CAACC,KAAT,GAAiB,GAApB,EAAyB;AACvB,gBAAG,EAAED,QAAQ,CAACE,IAAT,KAAkB,UAAlB,IAAgCF,QAAQ,CAACE,IAAT,KAAkB,WAApD,CAAH,EAAqE;AACnE/F,cAAAA,SAAS,CAACqF,GAAD,EAAMQ,QAAQ,CAACG,CAAf,EAAkBH,QAAQ,CAACI,CAA3B,EAA8B,CAA9B,EAAiC,kBAAjC,CAAT;AACA,kBAAIC,WAAW,GAAGnG,mBAAmB,CAAC8F,QAAQ,CAACE,IAAV,CAArC;;AACA,kBAAI;AACFG,gBAAAA,WAAW,CAACC,OAAZ,CAAqBC,UAAD,IAAgB;AAClC,sBAAIC,OAAO,GAAGD,UAAU,CAACE,WAAX,EAAd;AACArG,kBAAAA,WAAW,CAACoF,GAAD,EAAM,CAACQ,QAAQ,CAACG,CAAV,EAAaH,QAAQ,CAACI,CAAtB,CAAN,EACP,CAACP,SAAS,CAAC5F,MAAM,CAACuG,OAAD,CAAP,CAAT,CAA2BL,CAA5B,EACCN,SAAS,CAAC5F,MAAM,CAACuG,OAAD,CAAP,CAAT,CAA2BJ,CAD5B,CADO,EAGT/F,aAHS,CAAX;AAID,iBAND;AAOD,eARD,CAQE,OAAMqG,GAAN,EAAW,CAEZ;AAEF;AACF,WAjBD,MAiBO;AACLrB,YAAAA,WAAW,IAAI,CAAf;AACD;;AACD,iBAAO,CAACW,QAAQ,CAACG,CAAV,EAAaH,QAAQ,CAACI,CAAtB,CAAP;AACD,SAtBW,CAAZ;;AAuBA,YAAGf,WAAW,GAAG,CAAjB,EAAoB;AAClBhF,UAAAA,aAAa,GAAG,kBAAhB;AACA;AACD;;AACD,cAAMsG,cAAc,GAAG5C,sBAAsB,CAAC+B,KAAD,CAA7C;AACA,cAAMc,cAAc,GAAGjC,cAAc,CAACkC,OAAf,CAAuBF,cAAvB,CAAvB;AAEAC,QAAAA,cAAc,CAACE,KAAf,GAAuBC,IAAvB,CAA6BC,IAAD,IAAU;AACpC,gBAAMC,OAAO,GAAGxF,QAAQ,CAACL,WAAD,CAAxB;AACA8F,UAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAAC,CAAD,CAAJ,CAAQC,OAAR,CAAZ;;AACA,cAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQC,OAAR,IAAmB,IAAtB,EAA4B;AAE1B,gBAAG,CAACzG,IAAJ,EAAU;AACRqE,cAAAA,UAAU,CAACuC,IAAX;AACAvG,cAAAA,eAAe,CAAC,IAAIwG,IAAJ,CAASA,IAAI,EAAb,EAAiBC,OAAjB,EAAD,CAAf;AACA9G,cAAAA,IAAI,GAAG,IAAP;AACD;;AACDO,YAAAA,cAAc,CAAC,IAAIsG,IAAJ,CAASA,IAAI,EAAb,EAAiBC,OAAjB,EAAD,CAAd;AACAjH,YAAAA,aAAa,GAAG,cAAhB;AACD,WATD,MASO;AACLG,YAAAA,IAAI,GAAG,KAAP;AACAH,YAAAA,aAAa,GAAG,kBAAhB;AACAwE,YAAAA,UAAU,CAAC0C,KAAX;AACA1C,YAAAA,UAAU,CAAC/D,WAAX,GAAyB,CAAzB;AACD;AACF,SAlBD;AAmBD,OAnDD,CAmDE,OAAM4F,GAAN,EAAW;AACXQ,QAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AACD;AAGF;AACF,GApED;;AAsEA,WAASc,SAAT,GAAoB;AAClBjG,IAAAA,cAAc,CAAC,IAAD,CAAd;AACA2C,IAAAA,UAAU;AACX;;AAED,WAASuD,QAAT,GAAoB;AAClBlG,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAmG,IAAAA,aAAa,CAACnH,QAAD,CAAb;AACD;;AAID,MAAGe,WAAH,EAAgB;AACd,wBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,iCACE;AAAA,sCAAgBN,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,iCACE;AAAA,iCAAWE,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAA,gCAEE,QAAC,MAAD;AACA,UAAA,KAAK,EAAC,OADN;AAEA,UAAA,MAAM,EAAC,OAFP;AAGA,UAAA,EAAE,EAAC,QAHH;AAIA,UAAA,GAAG,EAAER,SAJL;AAKA,UAAA,KAAK,EAAE;AACLiH,YAAAA,QAAQ,EAAE,UADL;AAELxF,YAAAA,IAAI,EAAE,GAFD;AAGLyF,YAAAA,GAAG,EAAE,GAHA;AAILC,YAAAA,OAAO,EAAE;AAJJ;AALP;AAAA;AAAA;AAAA;AAAA,gBAFF,eAcE;AACE,UAAA,GAAG,EAAElH,SADP;AAEE,UAAA,EAAE,EAAC,WAFL;AAGE,UAAA,KAAK,EAAC,OAHR;AAIE,UAAA,MAAM,EAAC,OAJT;AAKE,UAAA,KAAK,EAAE;AACLgH,YAAAA,QAAQ,EAAE,UADL;AAELxF,YAAAA,IAAI,EAAE,GAFD;AAGLyF,YAAAA,GAAG,EAAE,GAHA;AAILE,YAAAA,MAAM,EAAE;AAJH;AALT;AAAA;AAAA;AAAA;AAAA,gBAdF,eA2BA;AAAA,iCACI;AACE,YAAA,GAAG,EAAE9H,UAAU,CAACoB,WAAD,CADjB;AAEE,YAAA,SAAS,EAAC;AAFZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA3BA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eA4CE;AACE,QAAA,OAAO,EAAEqG,QADX;AAEE,QAAA,SAAS,EAAC,eAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5CF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmDD;;AAED,sBACE;AACE,IAAA,SAAS,EAAC,gBADZ;AAAA,4BAIE,QAAC,QAAD;AACE,MAAA,QAAQ,EAAEnH,QADZ;AAEE,MAAA,WAAW,EAAEc,WAFf;AAGE,MAAA,cAAc,EAAEC;AAHlB;AAAA;AAAA;AAAA;AAAA,YAJF,eASE,QAAC,YAAD;AACI,MAAA,WAAW,EAAED;AADjB;AAAA;AAAA;AAAA;AAAA,YATF,eAYE;AACI,MAAA,OAAO,EAAEoG,SADb;AAEI,MAAA,SAAS,EAAC,eAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GAhQQ/G,I;;KAAAA,I;AAkQT,eAAeA,IAAf","sourcesContent":["import * as poseDetection from '@tensorflow-models/pose-detection';\nimport * as tf from '@tensorflow/tfjs';\nimport React, { useRef, useState, useEffect } from 'react'\nimport backend from '@tensorflow/tfjs-backend-webgl'\nimport Webcam from 'react-webcam'\nimport { count } from '../../utils/music';\n\nimport Instructions from '../../components/Instrctions/Instructions';\n\nimport './Yoga.css'\n\nimport DropDown from '../../components/DropDown/DropDown';\nimport { poseImages } from '../../utils/pose_images';\nimport { POINTS, keypointConnections } from '../../utils/data';\nimport { drawPoint, drawSegment } from '../../utils/helper'\n\n\n\nlet skeletonColor = 'rgb(255,255,255)'\nlet poseList = [\n  'Tree', 'Chair', 'Cobra', 'Warrior', 'Dog',\n  'Shoulderstand', 'Traingle'\n]\n\nlet interval\n\n// flag variable is used to help capture the time when AI just detect\n// the pose as correct(probability more than threshold)\nlet flag = false\n\n\nfunction Yoga() {\n  const webcamRef = useRef(null)\n  const canvasRef = useRef(null)\n\n\n  const [startingTime, setStartingTime] = useState(0)\n  const [currentTime, setCurrentTime] = useState(0)\n  const [poseTime, setPoseTime] = useState(0)\n  const [bestPerform, setBestPerform] = useState(0)\n  const [currentPose, setCurrentPose] = useState('Tree')\n  const [isStartPose, setIsStartPose] = useState(false)\n\n\n  useEffect(() => {\n    const timeDiff = (currentTime - startingTime)/1000\n    if(flag) {\n      setPoseTime(timeDiff)\n    }\n    if((currentTime - startingTime)/1000 > bestPerform) {\n      setBestPerform(timeDiff)\n    }\n  }, [currentTime])\n\n\n  useEffect(() => {\n    setCurrentTime(0)\n    setPoseTime(0)\n    setBestPerform(0)\n  }, [currentPose])\n\n  const CLASS_NO = {\n    Chair: 0,\n\n    Dog: 1,\n\n\n    Traingle: 2,\n    Tree: 3,\n    Warrior: 4,\n  }\n\n  function get_center_point(landmarks, left_bodypart, right_bodypart) {\n    let left = tf.gather(landmarks, left_bodypart, 1)\n    let right = tf.gather(landmarks, right_bodypart, 1)\n    const center = tf.add(tf.mul(left, 0.5), tf.mul(right, 0.5))\n    return center\n\n  }\n\n  function get_pose_size(landmarks, torso_size_multiplier=2.5) {\n    let hips_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP)\n    let shoulders_center = get_center_point(landmarks,POINTS.LEFT_SHOULDER, POINTS.RIGHT_SHOULDER)\n    let torso_size = tf.norm(tf.sub(shoulders_center, hips_center))\n    let pose_center_new = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP)\n    pose_center_new = tf.expandDims(pose_center_new, 1)\n\n    pose_center_new = tf.broadcastTo(pose_center_new,\n        [1, 17, 2]\n      )\n      // return: shape(17,2)\n    let d = tf.gather(tf.sub(landmarks, pose_center_new), 0, 0)\n    let max_dist = tf.max(tf.norm(d,'euclidean', 0))\n\n    // normalize scale\n    let pose_size = tf.maximum(tf.mul(torso_size, torso_size_multiplier), max_dist)\n    return pose_size\n  }\n\n  function normalize_pose_landmarks(landmarks) {\n    let pose_center = get_center_point(landmarks, POINTS.LEFT_HIP, POINTS.RIGHT_HIP)\n    pose_center = tf.expandDims(pose_center, 1)\n    pose_center = tf.broadcastTo(pose_center,\n        [1, 17, 2]\n      )\n    landmarks = tf.sub(landmarks, pose_center)\n\n    let pose_size = get_pose_size(landmarks)\n    landmarks = tf.div(landmarks, pose_size)\n    return landmarks\n  }\n\n  function landmarks_to_embedding(landmarks) {\n    // normalize landmarks 2D\n    landmarks = normalize_pose_landmarks(tf.expandDims(landmarks, 0))\n    let embedding = tf.reshape(landmarks, [1,34])\n    return embedding\n  }\n\n  const runMovenet = async () => {\n    const detectorConfig = {modelType: poseDetection.movenet.modelType.SINGLEPOSE_THUNDER};\n    const detector = await poseDetection.createDetector(poseDetection.SupportedModels.MoveNet, detectorConfig);\n    const poseClassifier = await tf.loadLayersModel('https://models.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json')\n    const countAudio = new Audio(count)\n    countAudio.loop = true\n    interval = setInterval(() => {\n        detectPose(detector, poseClassifier, countAudio)\n    }, 100)\n  }\n\n  const detectPose = async (detector, poseClassifier, countAudio) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      let notDetected = 0\n      const video = webcamRef.current.video\n      const pose = await detector.estimatePoses(video)\n      const ctx = canvasRef.current.getContext('2d')\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      try {\n        const keypoints = pose[0].keypoints\n        let input = keypoints.map((keypoint) => {\n          if(keypoint.score > 0.4) {\n            if(!(keypoint.name === 'left_eye' || keypoint.name === 'right_eye')) {\n              drawPoint(ctx, keypoint.x, keypoint.y, 8, 'rgb(255,255,255)')\n              let connections = keypointConnections[keypoint.name]\n              try {\n                connections.forEach((connection) => {\n                  let conName = connection.toUpperCase()\n                  drawSegment(ctx, [keypoint.x, keypoint.y],\n                      [keypoints[POINTS[conName]].x,\n                       keypoints[POINTS[conName]].y]\n                  , skeletonColor)\n                })\n              } catch(err) {\n\n              }\n\n            }\n          } else {\n            notDetected += 1\n          }\n          return [keypoint.x, keypoint.y]\n        })\n        if(notDetected > 4) {\n          skeletonColor = 'rgb(255,255,255)'\n          return\n        }\n        const processedInput = landmarks_to_embedding(input)\n        const classification = poseClassifier.predict(processedInput)\n\n        classification.array().then((data) => {\n          const classNo = CLASS_NO[currentPose]\n          console.log(data[0][classNo])\n          if(data[0][classNo] > 0.97) {\n\n            if(!flag) {\n              countAudio.play()\n              setStartingTime(new Date(Date()).getTime())\n              flag = true\n            }\n            setCurrentTime(new Date(Date()).getTime())\n            skeletonColor = 'rgb(0,255,0)'\n          } else {\n            flag = false\n            skeletonColor = 'rgb(255,255,255)'\n            countAudio.pause()\n            countAudio.currentTime = 0\n          }\n        })\n      } catch(err) {\n        console.log(err)\n      }\n\n\n    }\n  }\n\n  function startYoga(){\n    setIsStartPose(true)\n    runMovenet()\n  }\n\n  function stopPose() {\n    setIsStartPose(false)\n    clearInterval(interval)\n  }\n\n\n\n  if(isStartPose) {\n    return (\n      <div className=\"yoga-container\">\n        <div className=\"performance-container\">\n            <div className=\"pose-performance\">\n              <h4>Pose Time: {poseTime} s</h4>\n            </div>\n            <div className=\"pose-performance\">\n              <h4>Best: {bestPerform} s</h4>\n            </div>\n          </div>\n        <div>\n\n          <Webcam\n          width='640px'\n          height='480px'\n          id=\"webcam\"\n          ref={webcamRef}\n          style={{\n            position: 'absolute',\n            left: 120,\n            top: 100,\n            padding: '0px',\n          }}\n        />\n          <canvas\n            ref={canvasRef}\n            id=\"my-canvas\"\n            width='640px'\n            height='480px'\n            style={{\n              position: 'absolute',\n              left: 120,\n              top: 100,\n              zIndex: 1\n            }}\n          >\n          </canvas>\n        <div>\n            <img\n              src={poseImages[currentPose]}\n              className=\"pose-img\"\n            />\n          </div>\n\n        </div>\n        <button\n          onClick={stopPose}\n          className=\"secondary-btn\"\n        >Stop Pose</button>\n      </div>\n    )\n  }\n\n  return (\n    <div\n      className=\"yoga-container\"\n    >\n\n      <DropDown\n        poseList={poseList}\n        currentPose={currentPose}\n        setCurrentPose={setCurrentPose}\n      />\n      <Instructions\n          currentPose={currentPose}\n        />\n      <button\n          onClick={startYoga}\n          className=\"secondary-btn\"\n        >Start Pose</button>\n\n\n    </div>\n  )\n}\n\nexport default Yoga\n"]},"metadata":{},"sourceType":"module"}