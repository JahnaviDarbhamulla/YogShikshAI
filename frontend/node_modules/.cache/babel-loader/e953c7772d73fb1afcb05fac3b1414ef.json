{"ast":null,"code":"import _toConsumableArray from \"C:/Users/RajaJ/Downloads/YogaIntelliJ-main/YogaIntelliJ-main/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { padV2Config } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function spaceToBatchND(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var blockShape = attrs.blockShape,\n      paddings = attrs.paddings;\n  assertNotComplex([x], 'spaceToBatchND');\n  var prod = util.sizeFromShape(blockShape);\n  var completePaddings = [[0, 0]];\n  completePaddings.push.apply(completePaddings, _toConsumableArray(paddings));\n\n  for (var i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  var paddedX = padV2Config.kernelFunc({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      paddings: completePaddings,\n      constantValue: 0\n    }\n  });\n  var reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n  var permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  var flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n  var reshapeInputs = {\n    x: paddedX\n  };\n  var reshapeAttrs = {\n    shape: reshapedPaddedShape\n  };\n  var paddedXReshaped = reshape({\n    inputs: reshapeInputs,\n    backend: backend,\n    attrs: reshapeAttrs\n  });\n  var transposeInputs = {\n    x: paddedXReshaped\n  };\n  var transposeAttrs = {\n    perm: permutedReshapedPaddedPermutation\n  };\n  var paddedXT = transpose({\n    inputs: transposeInputs,\n    backend: backend,\n    attrs: transposeAttrs\n  });\n  var resultReshapeInputs = {\n    x: paddedXT\n  };\n  var resultReshapeAttrs = {\n    shape: flattenShape\n  };\n  var result = reshape({\n    inputs: resultReshapeInputs,\n    backend: backend,\n    attrs: resultReshapeAttrs\n  });\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n  return result;\n}\nexport var spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}