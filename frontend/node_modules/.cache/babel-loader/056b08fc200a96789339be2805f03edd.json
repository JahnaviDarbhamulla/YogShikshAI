{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from '../gather_gpu';\nimport { gatherV2ImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      indices = inputs.indices;\n  var axis = attrs.axis,\n      batchDims = attrs.batchDims; // Throw error when any index is out of bound.\n\n  var parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  var indicesVals = backend.readSync(indices.dataId);\n  var axisDim = x.shape[parsedAxis];\n\n  var _loop = function _loop(i) {\n    var index = indicesVals[i];\n    util.assert(index <= axisDim - 1 && index >= 0, function () {\n      return \"GatherV2: the index value \".concat(index, \" is not in [0, \").concat(axisDim - 1, \"]\");\n    });\n  };\n\n  for (var i = 0; i < indicesVals.length; ++i) {\n    _loop(i);\n  }\n\n  var shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n  var indicesSize = util.sizeFromShape(indices.shape);\n  var toDispose = [];\n  var flattenX = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    }\n  });\n  var flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    backend: backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    }\n  });\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n  var flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    var indicesBuf = backend.bufferSync(flattenIndex);\n    var xBuf = backend.bufferSync(flattenX);\n    var outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n    toDispose.forEach(function (t) {\n      return backend.disposeIntermediateTensorInfo(t);\n    });\n    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  var program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  var res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n  var reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend: backend,\n    attrs: {\n      shape: shapeInfo.outputShape\n    }\n  });\n  toDispose.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return reshaped;\n}\nexport var gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/GatherV2.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.readSync(indices.dataId) as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}