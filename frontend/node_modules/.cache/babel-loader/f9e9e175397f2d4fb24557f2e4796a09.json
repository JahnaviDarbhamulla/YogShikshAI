{"ast":null,"code":"import _slicedToArray from \"C:/Users/RajaJ/Downloads/YogaIntelliJ-main/YogaIntelliJ-main/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nvar preluImpl = createSimpleBinaryKernelImpl(function (xValue, aValue) {\n  return xValue < 0 ? aValue * xValue : xValue;\n});\nexport function prelu(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var x = inputs.x,\n      alpha = inputs.alpha;\n  assertNotComplex([x, alpha], 'prelu');\n  var aVals = backend.data.get(x.dataId).values;\n  var bVals = backend.data.get(alpha.dataId).values;\n\n  var _preluImpl = preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32'),\n      _preluImpl2 = _slicedToArray(_preluImpl, 2),\n      resultData = _preluImpl2[0],\n      resultShape = _preluImpl2[1];\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\nexport var preluConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Prelu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAsB,KAAtB,QAAuE,uBAAvE;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AACA,SAAQ,4BAAR,QAA2C,sBAA3C;AAEA,IAAM,SAAS,GAAG,4BAA4B,CAC1C,UAAC,MAAD,EAAiB,MAAjB;AAAA,SAAoC,MAAM,GAAG,CAAT,GAAa,MAAM,GAAG,MAAtB,GAA+B,MAAnE;AAAA,CAD0C,CAA9C;AAGA,OAAM,SAAU,KAAV,CAAgB,IAAhB,EAAoE;AAExE,MAAO,MAAP,GAA0B,IAA1B,CAAO,MAAP;AAAA,MAAe,OAAf,GAA0B,IAA1B,CAAe,OAAf;AACA,MAAO,CAAP,GAAmB,MAAnB,CAAO,CAAP;AAAA,MAAU,KAAV,GAAmB,MAAnB,CAAU,KAAV;AAEA,EAAA,gBAAgB,CAAC,CAAC,CAAD,EAAI,KAAJ,CAAD,EAAa,OAAb,CAAhB;AAEA,MAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAAzC;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,KAAK,CAAC,MAAvB,EAA+B,MAA7C;;AAEA,mBACI,SAAS,CAAC,CAAC,CAAC,KAAH,EAAU,KAAK,CAAC,KAAhB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,SAArC,CADb;AAAA;AAAA,MAAO,UAAP;AAAA,MAAmB,WAAnB;;AAGA,SAAO,OAAO,CAAC,cAAR,CAAuB,WAAvB,EAAoC,SAApC,EAA+C,UAA/C,CAAP;AACD;AAED,OAAO,IAAM,WAAW,GAAiB;AACvC,EAAA,UAAU,EAAE,KAD2B;AAEvC,EAAA,WAAW,EAAE,KAF0B;AAGvC,EAAA,UAAU,EAAE;AAH2B,CAAlC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}